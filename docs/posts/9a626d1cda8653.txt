1:"$Sreact.fragment"
3:I[831,[],""]
4:I[8307,[],""]
6:I[9757,[],"MetadataBoundary"]
8:I[9757,[],"OutletBoundary"]
b:I[8475,[],"AsyncMetadataOutlet"]
d:I[9757,[],"ViewportBoundary"]
f:I[8458,[],""]
:HL["/_next/static/css/47a2cdd79f9d68e5.css","style"]
:HL["/_next/static/css/77ddd172f309e09a.css","style"]
0:{"P":null,"b":"pjcoGw-RG9iKrG_8FMCtl","p":"","c":["","posts","9a626d1cda8653"],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","9a626d1cda8653","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/47a2cdd79f9d68e5.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/77ddd172f309e09a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","div",null,{"className":"container-fluid","children":["$","div",null,{"className":"row","children":[["$","div",null,{"className":"col-sm-3","style":{"fontSize":12.5},"children":"$L2"}],["$","div",null,{"className":"col-sm-9","children":[["$","div",null,{"className":"container-fluid","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],";"]}]]}]}]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","9a626d1cda8653","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",["$","$L6",null,{"children":"$L7"}],null,["$","$L8",null,{"children":["$L9","$La",["$","$Lb",null,{"promise":"$@c"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","RPWywg3NzYTPA8e1BUGKK",{"children":[["$","$Ld",null,{"children":"$Le"}],null]}],null]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:"$Sreact.suspense"
11:I[8475,[],"AsyncMetadata"]
7:["$","$10",null,{"fallback":null,"children":["$","$L11",null,{"promise":"$@12"}]}]
13:I[70,["177","static/chunks/app/layout-bef829f3c2619dcf.js"],""]
a:null
2:[["$","$L13",null,{"href":"https://one.ilmsg.in.th","children":["$","h2",null,{"children":"one.ilmsg.in.th"}]}],["$","ul",null,{"className":"list-group","children":[["$","li","99",{"className":"list-group-item","children":["$","$L13",null,{"href":"/","children":"⛪ Home"}]}],[["$","li","c5bc731ce737e7",{"className":"list-group-item","children":["📚"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e7","className":"link-underline link-underline-opacity-0","children":"Think and Grow Rich"}]]}],["$","li","c5bc731ce737e6",{"className":"list-group-item","children":["📚"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e6","className":"link-underline link-underline-opacity-0","children":"Rich Dad Poor Dad"}]]}],["$","li","c5bc731ce737e5",{"className":"list-group-item","children":["📚"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e5","className":"link-underline link-underline-opacity-0","children":"The Power of Now"}]]}],["$","li","c5bc731ce737e4",{"className":"list-group-item","children":["👻"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e4","className":"link-underline link-underline-opacity-0","children":"Getting Things Done (GTD)"}]]}],["$","li","c5bc731ce737e3",{"className":"list-group-item","children":["👻"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e3","className":"link-underline link-underline-opacity-0","children":"Make Your Bed"}]]}],["$","li","c5bc731ce737e2",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e2","className":"link-underline link-underline-opacity-0","children":"The 4-Hour Workweek"}]]}],["$","li","c5bc731ce737e1",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e1","className":"link-underline link-underline-opacity-0","children":"Who Moved My Cheese?"}]]}],["$","li","c5bc731ce737e0",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e0","className":"link-underline link-underline-opacity-0","children":"Deep Work: Rules for Focused Success in a Distracted World"}]]}],["$","li","c5bc731ce737d9",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737d9","className":"link-underline link-underline-opacity-0","children":"How to Stop Worrying and Start Living"}]]}],["$","li","c5bc731ce737d8",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737d8","className":"link-underline link-underline-opacity-0","children":"Act Like a Lady, Think Like a Man"}]]}],["$","li","c5bc731ce737d7",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737d7","className":"link-underline link-underline-opacity-0","children":"The 7 Habits of Highly Effective People"}]]}],["$","li","c5bc731ce737d5",{"className":"list-group-item","children":["😊"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737d5","className":"link-underline link-underline-opacity-0","children":"Take back your time"}]]}],["$","li","c03054919d6766",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c03054919d6766","className":"link-underline link-underline-opacity-0","children":"The 5 Second Rule"}]]}],["$","li","c03054919d6763",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c03054919d6763","className":"link-underline link-underline-opacity-0","children":"The 5 Second Rule"}]]}],["$","li","c03054919d6762",{"className":"list-group-item","children":["🐕"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/c03054919d6762","className":"link-underline link-underline-opacity-0","children":"Data Structures & Algorithms Cheat Sheet"}]]}],["$","li","98034aa5671421",{"className":"list-group-item","children":["💬"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/98034aa5671421","className":"link-underline link-underline-opacity-0","children":"Chart Cheat Sheet"}]]}],["$","li","98034aa5671420",{"className":"list-group-item","children":["💬"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/98034aa5671420","className":"link-underline link-underline-opacity-0","children":"8 Disciplines"}]]}],["$","li","98034aa5671419",{"className":"list-group-item","children":["💬"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/98034aa5671419","className":"link-underline link-underline-opacity-0","children":"Get Your Shit Together"}]]}],["$","li","98034aa5671418",{"className":"list-group-item","children":["💬"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/98034aa5671418","className":"link-underline link-underline-opacity-0","children":"Data Analyst"}]]}],["$","li","913edb41bb27d4",{"className":"list-group-item","children":["👻"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/913edb41bb27d4","className":"link-underline link-underline-opacity-0","children":"The $100 Startup"}]]}],["$","li","71a40e60fab23f",{"className":"list-group-item","children":["🕌"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/71a40e60fab23f","className":"link-underline link-underline-opacity-0","children":"8 ข้อคิดจากหนังสือ The Startup Mindset"}]]}],["$","li","5d0eb6b5d79ef5",{"className":"list-group-item","children":["💬"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/5d0eb6b5d79ef5","className":"link-underline link-underline-opacity-0","children":"Disrupt Yourself"}]]}],["$","li","5d0eb6b5d79ef4",{"className":"list-group-item","children":["💬"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/5d0eb6b5d79ef4","className":"link-underline link-underline-opacity-0","children":"How to Read Any Room"}]]}],["$","li","5d0eb6b5d79ef3",{"className":"list-group-item","children":["💬"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/5d0eb6b5d79ef3","className":"link-underline link-underline-opacity-0","children":"Atomic Habits"}]]}],["$","li","5d0eb6b5d79ef2",{"className":"list-group-item","children":["💬"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/5d0eb6b5d79ef2","className":"link-underline link-underline-opacity-0","children":"หนังสือการเงิน 7 เล่ม"}]]}],["$","li","5d0eb6b5d79ef1",{"className":"list-group-item","children":["💬"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/5d0eb6b5d79ef1","className":"link-underline link-underline-opacity-0","children":"เคียร์เคอการ์ด ฉบับกระชับ"}]]}],["$","li","186a50e7ae7288",{"className":"list-group-item","children":["😺"," ",["$","span",null,{"className":"badge bg-primary","children":"book"}]," ",["$","$L13",null,{"href":"/posts/186a50e7ae7288","className":"link-underline link-underline-opacity-0","children":"Startup Mindset"}]]}],["$","li","c5bc731ce737d4",{"className":"list-group-item","children":["😊"," ",["$","span",null,{"className":"badge bg-primary","children":"idea"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737d4","className":"link-underline link-underline-opacity-0","children":"(RBAC) in Next.js"}]]}],["$","li","c03054919d6765",{"className":"list-group-item","children":["😊"," ",["$","span",null,{"className":"badge bg-primary","children":"idea"}]," ",["$","$L13",null,{"href":"/posts/c03054919d6765","className":"link-underline link-underline-opacity-0","children":"Concurrency in Go Web Applications"}]]}],["$","li","c03054919d6764",{"className":"list-group-item","children":["😊"," ",["$","span",null,{"className":"badge bg-primary","children":"idea"}]," ",["$","$L13",null,{"href":"/posts/c03054919d6764","className":"link-underline link-underline-opacity-0","children":"best practices for multi tenant authorization"}]]}],["$","li","982b3df1525faa",{"className":"list-group-item","children":["🎃"," ",["$","span",null,{"className":"badge bg-primary","children":"idea"}]," ",["$","$L13",null,{"href":"/posts/982b3df1525faa","className":"link-underline link-underline-opacity-0","children":"Your Money or Your Life"}]]}],["$","li","98034aa5671417",{"className":"list-group-item","children":["😊"," ",["$","span",null,{"className":"badge bg-primary","children":"idea"}]," ",["$","$L13",null,{"href":"/posts/98034aa5671417","className":"link-underline link-underline-opacity-0","children":"Master The Art of Negotiation"}]]}],["$","li","98034aa5671416",{"className":"list-group-item","children":["😊"," ",["$","span",null,{"className":"badge bg-primary","children":"idea"}]," ",["$","$L13",null,{"href":"/posts/98034aa5671416","className":"link-underline link-underline-opacity-0","children":"การรับมือกับความท้าทายในชีวิต"}]]}],["$","li","844e6b801e6d29",{"className":"list-group-item","children":["📌"," ",["$","span",null,{"className":"badge bg-primary","children":"idea"}]," ",["$","$L13",null,{"href":"/posts/844e6b801e6d29","className":"link-underline link-underline-opacity-0","children":"Die With Zero"}]]}],["$","li","74e27bf78b3819",{"className":"list-group-item","children":["🎃"," ",["$","span",null,{"className":"badge bg-primary","children":"idea"}]," ",["$","$L13",null,{"href":"/posts/74e27bf78b3819","className":"link-underline link-underline-opacity-0","children":"The Millionaire Fastlane"}]]}],["$","li","c5bc731ce737d6",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"info"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737d6","className":"link-underline link-underline-opacity-0","children":"How to learn anything 5x faster"}]]}],["$","li","ed5595feec2c7d",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/ed5595feec2c7d","className":"link-underline link-underline-opacity-0","children":"Key Performance Indicators - KPIs"}]]}],["$","li","ed5595feec2c7c",{"className":"list-group-item","children":["🤖"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/ed5595feec2c7c","className":"link-underline link-underline-opacity-0","children":"Frontend Performance Cheatsheet"}]]}],["$","li","e8107ffecff144",{"className":"list-group-item","children":["🐡"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/e8107ffecff144","className":"link-underline link-underline-opacity-0","children":"Next.js ร่วมกับ gray-matter"}]]}],["$","li","c5bc731ce737e9",{"className":"list-group-item","children":["📚"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e9","className":"link-underline link-underline-opacity-0","children":"6 Key Business Frameworks Matrix"}]]}],["$","li","c5bc731ce737e8",{"className":"list-group-item","children":["📚"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737e8","className":"link-underline link-underline-opacity-0","children":"Chapter 01"}]]}],["$","li","c5bc731ce737d3",{"className":"list-group-item","children":["😊"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/c5bc731ce737d3","className":"link-underline link-underline-opacity-0","children":"Concurrency in Go Web Applications"}]]}],["$","li","c03054919d6761",{"className":"list-group-item","children":["🐕"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/c03054919d6761","className":"link-underline link-underline-opacity-0","children":"Essential Python Libraries for Data Science in 2025!"}]]}],["$","li","c03054919d6760",{"className":"list-group-item","children":["👋"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/c03054919d6760","className":"link-underline link-underline-opacity-0","children":"Prompt Engineering Techniques"}]]}],["$","li","9a626d1cda8653",{"className":"list-group-item","children":["💨"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/9a626d1cda8653","className":"link-underline link-underline-opacity-0","children":"TodoList ด้วย React, TypeScript, Firestore และ DaisyUI"}]]}],["$","li","961ddacbc63b92",{"className":"list-group-item","children":["🕌"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/961ddacbc63b92","className":"link-underline link-underline-opacity-0","children":"The Ultimate API Learning Roadmap"}]]}],["$","li","804f31b1ed61e7",{"className":"list-group-item","children":["👋"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/804f31b1ed61e7","className":"link-underline link-underline-opacity-0","children":"show me the cat"}]]}],["$","li","745b52707bd1f8",{"className":"list-group-item","children":["🐷"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/745b52707bd1f8","className":"link-underline link-underline-opacity-0","children":"Running Lean: Iterate from Plan A to a Plan That Works"}]]}],["$","li","5db5fceb39abb2",{"className":"list-group-item","children":["🦁"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/5db5fceb39abb2","className":"link-underline link-underline-opacity-0","children":"Cheatsheet On Database Performance"}]]}],["$","li","43d0123ac6e4e9",{"className":"list-group-item","children":["👻"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/43d0123ac6e4e9","className":"link-underline link-underline-opacity-0","children":"Data Analytics"}]]}],["$","li","43d0123ac6e4e8",{"className":"list-group-item","children":["👻"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/43d0123ac6e4e8","className":"link-underline link-underline-opacity-0","children":"Chapter 02"}]]}],["$","li","423e4444fe4bdf",{"className":"list-group-item","children":["📌"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/423e4444fe4bdf","className":"link-underline link-underline-opacity-0","children":"One-Page Business Plan"}]]}],["$","li","3265bdd2450fc7",{"className":"list-group-item","children":["🌟"," ",["$","span",null,{"className":"badge bg-primary","children":"tech"}]," ",["$","$L13",null,{"href":"/posts/3265bdd2450fc7","className":"link-underline link-underline-opacity-0","children":" วิธีทำน้ำอบไทย"}]]}]]]}]]
14:T76e1,<p>สวัสดีครับ นี่คือบทเรียนสอนสร้าง TodoList Application ด้วย React, TypeScript, Firestore และ DaisyUI อย่างละเอียด:</p>
<p><strong>สิ่งที่เราจะสร้าง:</strong></p>
<p>แอปพลิเคชัน TodoList แบบง่ายๆ ที่สามารถ:</p>
<ul>
<li>เพิ่มรายการสิ่งที่ต้องทำ (Todo)</li>
<li>แสดงรายการ Todo ทั้งหมด</li>
<li>ทำเครื่องหมายว่า Todo เสร็จสิ้นแล้ว</li>
<li>ลบ Todo ออกจากรายการ</li>
<li>ข้อมูลจะถูกจัดเก็บและซิงค์แบบเรียลไทม์กับ Firestore (ฐานข้อมูล NoSQL ของ Firebase)</li>
<li>หน้าตาแอปพลิเคชันจะสวยงามด้วย DaisyUI (ส่วนเสริมของ Tailwind CSS)</li>
</ul>
<p><strong>เทคโนโลยีที่ใช้:</strong></p>
<ul>
<li><strong>React:</strong> ไลบรารี JavaScript สำหรับสร้าง User Interface</li>
<li><strong>TypeScript:</strong> ส่วนขยายของ JavaScript ที่เพิ่มการตรวจสอบ Type ทำให้โค้ดน่าเชื่อถือมากขึ้น</li>
<li><strong>Vite:</strong> เครื่องมือ Build สมัยใหม่ที่รวดเร็วสำหรับการพัฒนาเว็บ</li>
<li><strong>Firebase (Firestore):</strong> แพลตฟอร์มสำหรับสร้างแอปพลิเคชัน มีบริการฐานข้อมูลแบบเรียลไทม์ (Firestore)</li>
<li><strong>Tailwind CSS:</strong> Utility-first CSS framework สำหรับสร้างดีไซน์ได้อย่างรวดเร็ว</li>
<li><strong>DaisyUI:</strong> Plugin สำหรับ Tailwind CSS ที่มี Components สำเร็จรูปให้ใช้งาน</li>
</ul>
<hr>
<p><strong>ขั้นตอนที่ 1: ตั้งค่าโปรเจกต์</strong></p>
<ol>
<li>
<p><strong>สร้างโปรเจกต์ React ด้วย Vite และ TypeScript:</strong>
เปิด Terminal หรือ Command Prompt แล้วรันคำสั่ง:</p>
<pre><code class="language-bash">npm create vite@latest my-todo-app --template react-ts
</code></pre>
<p>(แทนที่ <code>my-todo-app</code> ด้วยชื่อโปรเจกต์ที่คุณต้องการ)
จากนั้นทำตามคำแนะนำบนหน้าจอ (เลือก React -> TypeScript) แล้วเข้าไปในโฟลเดอร์โปรเจกต์:</p>
<pre><code class="language-bash">cd my-todo-app
</code></pre>
</li>
<li>
<p><strong>ติดตั้ง Dependencies:</strong></p>
<pre><code class="language-bash">npm install firebase react-icons tailwindcss postcss autoprefixer daisyui
npm install -D @tailwindcss/vite # สำหรับ Vite 5+
</code></pre>
<ul>
<li><code>firebase</code>: สำหรับเชื่อมต่อกับ Firebase และ Firestore</li>
<li><code>react-icons</code>: สำหรับไอคอนสวยๆ (เช่น ไอคอนถังขยะ)</li>
<li><code>tailwindcss</code>, <code>postcss</code>, <code>autoprefixer</code>: สำหรับ Tailwind CSS</li>
<li><code>daisyui</code>: สำหรับ Components สำเร็จรูป</li>
<li><code>@tailwindcss/vite</code>: Plugin สำหรับใช้งาน Tailwind CSS กับ Vite</li>
</ul>
</li>
</ol>
<hr>
<p><strong>ขั้นตอนที่ 2: กำหนดค่า Tailwind CSS และ DaisyUI</strong></p>
<ol>
<li>
<p><strong>สร้างไฟล์ Config ของ Tailwind:</strong></p>
<pre><code class="language-bash">npx tailwindcss init -p
</code></pre>
<p>คำสั่งนี้จะสร้างไฟล์ <code>tailwind.config.js</code> และ <code>postcss.config.js</code>.</p>
</li>
<li>
<p><strong>ตั้งค่า <code>tailwind.config.js</code>:</strong>
เปิดไฟล์ <code>tailwind.config.js</code> และแก้ไขดังนี้:</p>
<pre><code class="language-javascript">/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}", // บอกให้ Tailwind รู้ว่าไฟล์ไหนใช้ class บ้าง
  ],
  theme: {
    extend: {},
  },
  plugins: [
    require('daisyui'), // เพิ่ม DaisyUI plugin
  ],
  // (Optional) กำหนดธีม DaisyUI ที่ต้องการ
  daisyui: {
    themes: ["light", "dark", "cupcake"], // เลือกธีมที่ต้องการ
  },
}
</code></pre>
</li>
<li>
<p><strong>ตั้งค่า <code>@tailwindcss/vite</code> (สำหรับ Vite 5+):</strong>
เปิดไฟล์ <code>vite.config.ts</code> และแก้ไขดังนี้:</p>
<pre><code class="language-typescript">import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite' // Import plugin

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    tailwindcss(), // เพิ่ม plugin ที่นี่
  ],
})
</code></pre>
<p><em>(หากใช้ Vite เวอร์ชันเก่ากว่า อาจใช้วิธี import ใน CSS แทน)</em></p>
</li>
<li>
<p><strong>เพิ่ม Tailwind Directives ใน CSS:</strong>
เปิดไฟล์ <code>src/index.css</code> ลบเนื้อหาเดิมทิ้งทั้งหมด แล้วเพิ่ม:</p>
<pre><code class="language-css">@import "tailwindcss"; /* สำหรับ Vite 5+ */
@plugin "daisyui";   /* สำหรับ Vite 5+ */

/* หรือใช้ @tailwind directives หากใช้ Vite เวอร์ชันเก่า */
/*
@tailwind base;
@tailwind components;
@tailwind utilities;
*/

/* (Optional) เพิ่ม CSS ที่ต้องการเอง */
body {
  font-family: sans-serif;
}
</code></pre>
</li>
<li>
<p><strong>ทดสอบ Tailwind &#x26; DaisyUI:</strong>
เปิดไฟล์ <code>src/App.tsx</code> ลองเพิ่ม class ของ Tailwind และ DaisyUI เช่น:</p>
<pre><code class="language-tsx">function App() {
  return (
    &#x3C;div className="p-4">
      &#x3C;h1 className="text-3xl font-bold text-primary mb-4">My Todo App&#x3C;/h1>
      &#x3C;button className="btn btn-primary">Click Me&#x3C;/button>
    &#x3C;/div>
  )
}
export default App
</code></pre>
<p>รัน development server:</p>
<pre><code class="language-bash">npm run dev
</code></pre>
<p>เปิดเบราว์เซอร์ไปที่ <code>http://localhost:5173</code> (หรือ port ที่ Vite แสดง) คุณควรเห็นปุ่มสีหลัก (primary) ของ DaisyUI</p>
</li>
</ol>
<hr>
<p><strong>ขั้นตอนที่ 3: ตั้งค่า Firebase และ Firestore</strong></p>
<ol>
<li>
<p><strong>สร้าง Firebase Project:</strong></p>
<ul>
<li>ไปที่ <a href="https://firebase.google.com/">Firebase Console</a></li>
<li>คลิก "Add project" หรือ "สร้างโปรเจกต์"</li>
<li>ทำตามขั้นตอนเพื่อสร้างโปรเจกต์ใหม่ (ตั้งชื่อ, เลือกภูมิภาค, etc.)</li>
<li>ไม่ต้องเปิดใช้งาน Google Analytics ก็ได้สำหรับโปรเจกต์นี้</li>
</ul>
</li>
<li>
<p><strong>สร้าง Firestore Database:</strong></p>
<ul>
<li>ในหน้า Firebase project ของคุณ ไปที่เมนู Build > Firestore Database</li>
<li>คลิก "Create database" หรือ "สร้างฐานข้อมูล"</li>
<li>เลือกโหมด <strong>Test mode</strong> (โหมดทดสอบ) เพื่อให้ง่ายต่อการพัฒนา (สำคัญ: <strong>สำหรับ Production ต้องตั้งค่า Security Rules ให้รัดกุม!</strong>) โหมดทดสอบจะอนุญาตให้ทุกคนอ่านและเขียนข้อมูลได้ชั่วคราว</li>
<li>เลือกตำแหน่งที่ตั้งของ Cloud Firestore (เลือกที่ใกล้คุณที่สุด)</li>
<li>คลิก "Enable" หรือ "เปิดใช้งาน"</li>
</ul>
</li>
<li>
<p><strong>รับ Firebase Configuration:</strong></p>
<ul>
<li>กลับไปที่หน้า Project Overview (ภาพรวมโปรเจกต์)</li>
<li>คลิกที่ไอคอนรูปเฟือง (⚙️) ข้าง "Project Overview" แล้วเลือก "Project settings" (การตั้งค่าโปรเจกต์)</li>
<li>เลื่อนลงมาที่ส่วน "Your apps" (แอปของคุณ)</li>
<li>คลิกที่ไอคอน Web (<code>&#x3C;/></code>) เพื่อลงทะเบียนแอปเว็บใหม่</li>
<li>ตั้งชื่อเล่นให้แอป (เช่น "My Todo App Web") แล้วคลิก "Register app" (ลงทะเบียนแอป)</li>
<li>Firebase จะแสดง configuration object ให้คุณ <strong>คัดลอก</strong> object นี้ไว้ (ส่วน <code>firebaseConfig</code>)</li>
</ul>
</li>
<li>
<p><strong>สร้างไฟล์ Firebase Config ในโปรเจกต์ React:</strong></p>
<ul>
<li>ในโฟลเดอร์ <code>src</code> สร้างไฟล์ใหม่ชื่อ <code>firebase.ts</code></li>
<li>วางโค้ด <code>firebaseConfig</code> ที่คัดลอกมา และเพิ่มโค้ดสำหรับ initialize Firebase และ Firestore:</li>
</ul>
<pre><code class="language-typescript">// src/firebase.ts
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

// Your web app's Firebase configuration
// ใช้ Environment Variables เพื่อความปลอดภัยในแอปจริง
const firebaseConfig = {
  apiKey: "YOUR_API_KEY", // แทนที่ด้วยค่าของคุณ
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize Cloud Firestore and get a reference to the service
const db = getFirestore(app);

export { db }; // Export Firestore instance
</code></pre>
<p><strong>สำคัญ:</strong> ควรเก็บค่า Config เหล่านี้ไว้ใน Environment Variables (<code>.env</code> ไฟล์) เพื่อความปลอดภัย ไม่ควร hardcode ลงในโค้ดโดยตรง โดยเฉพาะ API Key. สำหรับ Vite ให้สร้างไฟล์ <code>.env</code> ที่ root ของโปรเจกต์ แล้วใส่ค่าดังนี้:</p>
<pre><code>VITE_FIREBASE_API_KEY=YOUR_API_KEY
VITE_FIREBASE_AUTH_DOMAIN=YOUR_AUTH_DOMAIN
VITE_FIREBASE_PROJECT_ID=YOUR_PROJECT_ID
# ... อื่นๆ
</code></pre>
<p>แล้วใน <code>firebase.ts</code> ให้เรียกใช้ผ่าน <code>import.meta.env</code>:</p>
<pre><code class="language-typescript">const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  // ... อื่นๆ
};
</code></pre>
</li>
</ol>
<hr>
<p><strong>ขั้นตอนที่ 4: กำหนดโครงสร้างข้อมูล (TypeScript Interface)</strong></p>
<p>สร้างไฟล์ <code>src/types.ts</code> เพื่อกำหนด interface สำหรับ Todo item:</p>
<pre><code class="language-typescript">// src/types.ts
import { Timestamp } from 'firebase/firestore';

export interface Todo {
  id: string;         // ID ของเอกสารใน Firestore
  text: string;       // ข้อความของ Todo
  completed: boolean; // สถานะเสร็จสิ้น
  createdAt: Timestamp; // เวลาที่สร้าง (ใช้ Timestamp ของ Firestore)
}
</code></pre>
<hr>
<p><strong>ขั้นตอนที่ 5: สร้าง Components</strong></p>
<p>เราจะสร้าง Components หลักๆ ดังนี้:</p>
<ol>
<li><strong><code>AddTodoForm.tsx</code></strong>: ฟอร์มสำหรับเพิ่ม Todo ใหม่</li>
<li><strong><code>TodoList.tsx</code></strong>: แสดงรายการ Todo ทั้งหมด</li>
<li><strong><code>TodoItem.tsx</code></strong>: แสดง Todo แต่ละรายการ</li>
</ol>
<p>สร้างโฟลเดอร์ <code>src/components</code> และสร้างไฟล์ต่อไปนี้:</p>
<p><strong><code>src/components/AddTodoForm.tsx</code></strong></p>
<pre><code class="language-typescript">import React, { useState } from 'react';

interface AddTodoFormProps {
  onAddTodo: (text: string) => void; // Function ที่รับมาจาก App.tsx
}

const AddTodoForm: React.FC&#x3C;AddTodoFormProps> = ({ onAddTodo }) => {
  const [inputText, setInputText] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (inputText.trim() === '') return; // ไม่เพิ่มถ้า input ว่าง
    onAddTodo(inputText);
    setInputText(''); // ล้าง input หลังเพิ่ม
  };

  return (
    &#x3C;form onSubmit={handleSubmit} className="flex gap-2 mb-4">
      &#x3C;input
        type="text"
        placeholder="เพิ่มรายการใหม่..."
        className="input input-bordered flex-grow" // ใช้ class ของ DaisyUI
        value={inputText}
        onChange={(e) => setInputText(e.target.value)}
      />
      &#x3C;button type="submit" className="btn btn-primary">
        เพิ่ม
      &#x3C;/button>
    &#x3C;/form>
  );
};

export default AddTodoForm;
</code></pre>
<p><strong><code>src/components/TodoItem.tsx</code></strong></p>
<pre><code class="language-typescript">import React from 'react';
import { Todo } from '../types'; // Import interface
import { FaTrash } from 'react-icons/fa'; // Import icon ถังขยะ

interface TodoItemProps {
  todo: Todo;
  onToggleComplete: (id: string, completed: boolean) => void;
  onDeleteTodo: (id: string) => void;
}

const TodoItem: React.FC&#x3C;TodoItemProps> = ({ todo, onToggleComplete, onDeleteTodo }) => {
  return (
    &#x3C;div className={`flex items-center justify-between p-3 mb-2 rounded-lg shadow ${todo.completed ? 'bg-base-200 opacity-60' : 'bg-base-100'}`}>
      &#x3C;div className="flex items-center gap-3">
        &#x3C;input
          type="checkbox"
          checked={todo.completed}
          onChange={() => onToggleComplete(todo.id, !todo.completed)}
          className="checkbox checkbox-primary" // ใช้ class ของ DaisyUI
        />
        &#x3C;span className={`text-lg ${todo.completed ? 'line-through' : ''}`}>
          {todo.text}
        &#x3C;/span>
      &#x3C;/div>
      &#x3C;button
        onClick={() => onDeleteTodo(todo.id)}
        className="btn btn-ghost btn-sm text-error hover:bg-error hover:text-base-100" // ใช้ class ของ DaisyUI
      >
        &#x3C;FaTrash /> {/* แสดงไอคอน */}
      &#x3C;/button>
    &#x3C;/div>
  );
};

export default TodoItem;
</code></pre>
<p><strong><code>src/components/TodoList.tsx</code></strong></p>
<pre><code class="language-typescript">import React from 'react';
import { Todo } from '../types';
import TodoItem from './TodoItem';

interface TodoListProps {
  todos: Todo[];
  onToggleComplete: (id: string, completed: boolean) => void;
  onDeleteTodo: (id: string) => void;
}

const TodoList: React.FC&#x3C;TodoListProps> = ({ todos, onToggleComplete, onDeleteTodo }) => {
  if (todos.length === 0) {
    return &#x3C;p className="text-center text-gray-500">ยังไม่มีรายการ...&#x3C;/p>;
  }

  return (
    &#x3C;div>
      {todos.map((todo) => (
        &#x3C;TodoItem
          key={todo.id}
          todo={todo}
          onToggleComplete={onToggleComplete}
          onDeleteTodo={onDeleteTodo}
        />
      ))}
    &#x3C;/div>
  );
};

export default TodoList;
</code></pre>
<hr>
<p><strong>ขั้นตอนที่ 6: เชื่อมต่อกับ Firestore และจัดการ State ใน <code>App.tsx</code></strong></p>
<p>ตอนนี้เราจะรวม Components ทั้งหมดเข้าด้วยกันใน <code>App.tsx</code> และเขียน Logic สำหรับการเพิ่ม, อ่าน, อัปเดต, และลบข้อมูลใน Firestore</p>
<p>เปิดไฟล์ <code>src/App.tsx</code> และแก้ไขดังนี้:</p>
<pre><code class="language-typescript">import React, { useState, useEffect } from 'react';
import { db } from './firebase'; // Import Firestore instance
import {
  collection,
  addDoc,
  onSnapshot, // สำหรับ real-time updates
  query,
  orderBy,
  serverTimestamp, // สำหรับ timestamp ของ server
  doc,
  updateDoc,
  deleteDoc,
  Timestamp, // Import Timestamp type
} from 'firebase/firestore';
import { Todo } from './types'; // Import interface

// Import Components
import AddTodoForm from './components/AddTodoForm';
import TodoList from './components/TodoList';

function App() {
  const [todos, setTodos] = useState&#x3C;Todo[]>([]); // State สำหรับเก็บรายการ Todo
  const [loading, setLoading] = useState(true); // State สำหรับ Loading

  // --- Firestore Operations ---

  // 1. Read (Fetch Todos with Real-time Updates)
  useEffect(() => {
    // สร้าง query เพื่อดึงข้อมูลจาก collection 'todos' และเรียงตาม createdAt
    const q = query(collection(db, 'todos'), orderBy('createdAt', 'desc')); // เรียงล่าสุดขึ้นก่อน

    // onSnapshot จะทำงานทุกครั้งที่มีการเปลี่ยนแปลงใน collection
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const todosData: Todo[] = [];
      querySnapshot.forEach((doc) => {
        // เพิ่ม id ของ document เข้าไปใน object
        todosData.push({ ...doc.data(), id: doc.id } as Todo);
      });
      setTodos(todosData); // อัปเดต state
      setLoading(false); // หยุด loading
    }, (error) => {
      // จัดการ Error (เช่น แสดงข้อความ)
      console.error("Error fetching todos: ", error);
      setLoading(false);
    });

    // Cleanup function: Unsubscribe เมื่อ component unmount
    return () => unsubscribe();
  }, []); // useEffect นี้จะทำงานครั้งเดียวตอน component mount

  // 2. Create (Add Todo)
  const handleAddTodo = async (text: string) => {
    try {
      await addDoc(collection(db, 'todos'), {
        text: text,
        completed: false,
        createdAt: serverTimestamp(), // ใช้ timestamp จาก server
      });
      // ไม่ต้อง setTodos ที่นี่ เพราะ onSnapshot จะจัดการอัปเดต state ให้เอง
    } catch (error) {
      console.error("Error adding todo: ", error);
      // ควรมี feedback ให้ user ทราบว่าเกิดข้อผิดพลาด
    }
  };

  // 3. Update (Toggle Complete Status)
  const handleToggleComplete = async (id: string, completed: boolean) => {
    try {
      const todoRef = doc(db, 'todos', id); // อ้างอิง document ด้วย id
      await updateDoc(todoRef, {
        completed: completed, // อัปเดต field 'completed'
      });
    } catch (error) {
      console.error("Error updating todo: ", error);
    }
  };

  // 4. Delete (Remove Todo)
  const handleDeleteTodo = async (id: string) => {
    if (window.confirm("ต้องการลบรายการนี้ใช่หรือไม่?")) { // ยืนยันก่อนลบ
        try {
            const todoRef = doc(db, 'todos', id);
            await deleteDoc(todoRef);
        } catch (error) {
            console.error("Error deleting todo: ", error);
        }
    }
  };

  // --- Render UI ---
  return (
    &#x3C;div className="container mx-auto p-4 max-w-lg">
      &#x3C;div className="card bg-base-100 shadow-xl">
        &#x3C;div className="card-body">
          &#x3C;h1 className="card-title text-3xl justify-center mb-4">
             Todo List (React + TS + Firestore + DaisyUI)
          &#x3C;/h1>

          {/* Form สำหรับเพิ่ม Todo */}
          &#x3C;AddTodoForm onAddTodo={handleAddTodo} />

          {/* แสดง Loading หรือ รายการ Todo */}
          {loading ? (
             &#x3C;div className="text-center">
                &#x3C;span className="loading loading-spinner loading-lg text-primary">&#x3C;/span>
                &#x3C;p>กำลังโหลดข้อมูล...&#x3C;/p>
             &#x3C;/div>
          ) : (
            &#x3C;TodoList
              todos={todos}
              onToggleComplete={handleToggleComplete}
              onDeleteTodo={handleDeleteTodo}
            />
          )}
        &#x3C;/div>
      &#x3C;/div>
      {/* (Optional) Footer หรือส่วนอื่นๆ */}
      &#x3C;footer className="text-center mt-4 text-sm text-gray-500">
         สร้างด้วยความรัก ❤️ โดย [ชื่อของคุณ]
      &#x3C;/footer>
    &#x3C;/div>
  );
}

export default App;
</code></pre>
<p><strong>คำอธิบายโค้ด <code>App.tsx</code>:</strong></p>
<ol>
<li><strong>Imports:</strong> นำเข้า function ที่จำเป็นจาก Firebase SDK, interface <code>Todo</code>, และ components ที่สร้างไว้</li>
<li><strong>State:</strong>
<ul>
<li><code>todos</code>: เก็บ array ของ <code>Todo</code> objects ที่ได้จาก Firestore.</li>
<li><code>loading</code>: ใช้แสดงสถานะขณะรอข้อมูลครั้งแรก.</li>
</ul>
</li>
<li><strong><code>useEffect</code> (Read/Fetch):</strong>
<ul>
<li>ใช้ <code>useEffect</code> เพื่อดึงข้อมูลเมื่อ component โหลดเสร็จ</li>
<li><code>collection(db, 'todos')</code>: อ้างอิงถึง collection ชื่อ 'todos' ใน Firestore</li>
<li><code>query(..., orderBy('createdAt', 'desc'))</code>: สร้าง query เพื่อดึงข้อมูลและเรียงลำดับตามฟิลด์ <code>createdAt</code> จากล่าสุดไปเก่าสุด</li>
<li><code>onSnapshot(q, ...)</code>: ติดตาม (listen) การเปลี่ยนแปลงใน query นั้นๆ แบบเรียลไทม์ ฟังก์ชัน callback จะทำงานทุกครั้งที่ข้อมูลใน collection 'todos' เปลี่ยนแปลง (เพิ่ม, ลบ, แก้ไข)</li>
<li>ภายใน callback: เราวน loop (<code>forEach</code>) ผ่าน <code>querySnapshot.docs</code> เพื่อสร้าง array <code>todosData</code> ใหม่ โดยรวมข้อมูล (<code>doc.data()</code>) และ <code>id</code> ของแต่ละเอกสารเข้าด้วยกัน แล้วอัปเดต state (<code>setTodos</code>)</li>
<li><code>return () => unsubscribe();</code>: ส่วนสำคัญของ <code>useEffect</code> คือ cleanup function ที่จะทำงานเมื่อ component ถูกทำลาย (unmount) เพื่อยกเลิกการติดตาม (<code>unsubscribe</code>) ป้องกัน memory leaks</li>
</ul>
</li>
<li><strong><code>handleAddTodo</code> (Create):</strong>
<ul>
<li>ใช้ <code>addDoc(collection(db, 'todos'), {...})</code> เพื่อเพิ่มเอกสารใหม่ลงใน collection 'todos'</li>
<li><code>text</code>, <code>completed: false</code> คือข้อมูลเริ่มต้น</li>
<li><code>createdAt: serverTimestamp()</code>: ใช้ timestamp จากฝั่งเซิร์ฟเวอร์ Firebase เพื่อให้เวลาถูกต้องตรงกัน ไม่ว่า client จะตั้งเวลาเครื่องไว้อย่างไร</li>
</ul>
</li>
<li><strong><code>handleToggleComplete</code> (Update):</strong>
<ul>
<li><code>doc(db, 'todos', id)</code>: สร้าง reference ไปยังเอกสารที่ต้องการอัปเดตโดยใช้ <code>id</code></li>
<li><code>updateDoc(todoRef, { completed: completed })</code>: อัปเดตเฉพาะฟิลด์ <code>completed</code> ของเอกสารนั้น</li>
</ul>
</li>
<li><strong><code>handleDeleteTodo</code> (Delete):</strong>
<ul>
<li><code>doc(db, 'todos', id)</code>: สร้าง reference ไปยังเอกสารที่ต้องการลบ</li>
<li><code>deleteDoc(todoRef)</code>: ลบเอกสารนั้นออกจาก Firestore</li>
<li>มีการใช้ <code>window.confirm</code> เพื่อถามยืนยันก่อนลบ</li>
</ul>
</li>
<li><strong>Render:</strong>
<ul>
<li>แสดง <code>AddTodoForm</code> โดยส่ง <code>handleAddTodo</code> เป็น prop</li>
<li>แสดง Loading spinner หาก <code>loading</code> เป็น <code>true</code></li>
<li>แสดง <code>TodoList</code> หาก <code>loading</code> เป็น <code>false</code> โดยส่ง state <code>todos</code> และ functions <code>handleToggleComplete</code>, <code>handleDeleteTodo</code> เป็น props</li>
</ul>
</li>
</ol>
<hr>
<p><strong>ขั้นตอนที่ 7: รันและทดสอบ</strong></p>
<ol>
<li>ตรวจสอบว่า Firebase Emulator หรือ Development Server ของคุณทำงานอยู่:
<pre><code class="language-bash">npm run dev
</code></pre>
</li>
<li>เปิดแอปในเบราว์เซอร์</li>
<li>ลองเพิ่มรายการ Todo ใหม่, ทำเครื่องหมายว่าเสร็จแล้ว, และลบรายการ</li>
<li>เปิด Firestore console ในเว็บ Firebase เพื่อดูข้อมูลที่ถูกสร้าง, อัปเดต, และลบแบบเรียลไทม์</li>
</ol>
<hr>
<p><strong>ข้อควรพิจารณาเพิ่มเติม:</strong></p>
<ul>
<li><strong>Error Handling:</strong> เพิ่มการแสดงข้อผิดพลาดให้ผู้ใช้ทราบเมื่อเกิดปัญหาในการติดต่อ Firestore</li>
<li><strong>Loading States:</strong> อาจเพิ่ม loading indicator แยกสำหรับการเพิ่ม, อัปเดต, หรือลบแต่ละรายการ เพื่อให้ผู้ใช้รู้ว่ากำลังมีการทำงานเบื้องหลัง</li>
<li><strong>Security Rules:</strong> <strong>สำคัญมากสำหรับ Production!</strong> ต้องตั้งค่า Firestore Security Rules ให้เหมาะสม เพื่อป้องกันการเข้าถึงข้อมูลโดยไม่ได้รับอนุญาต ควรใช้ Firebase Authentication เพื่อระบุตัวตนผู้ใช้และอนุญาตให้ผู้ใช้เข้าถึงเฉพาะข้อมูลของตนเองเท่านั้น</li>
<li><strong>Styling:</strong> ปรับแต่งสไตล์เพิ่มเติมด้วย Tailwind/DaisyUI classes ตามต้องการ</li>
<li><strong>การจัดการ State ที่ซับซ้อน:</strong> สำหรับแอปที่ใหญ่ขึ้น อาจพิจารณาใช้ State Management Library เช่น Zustand, Redux Toolkit, หรือ Context API ของ React เอง</li>
</ul>
<hr>
<p>บทเรียนนี้เป็นพื้นฐานในการสร้างแอปพลิเคชัน CRUD ด้วย React, TypeScript, Firestore และ DaisyUI คุณสามารถนำความรู้นี้ไปต่อยอดสร้างฟีเจอร์อื่นๆ เพิ่มเติมได้ครับ! หากมีคำถามเพิ่มเติม ถามได้เลยนะครับ!</p>
5:[["$","h2",null,{"children":"TodoList ด้วย React, TypeScript, Firestore และ DaisyUI"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$14"}}]]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:null
12:{"metadata":[["$","title","0",{"children":"one.ilmsg.in.th"}],["$","meta","1",{"name":"description","content":"weblog ilmsg.in.th"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
c:{"metadata":"$12:metadata","error":null,"digest":"$undefined"}
